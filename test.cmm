int func(int a[10]){

}

int main(){
    int b[10];
    func(b);
    return 0;
}
//test 16
/*
int main(){
    int a = 3, b = 4, i = 0, sum = 0;
    int c, d, e;
    int array[150];
    d = a * a;
    e = b * b;
    if ( -1 || d + e > 0)
        i = (a * a - b * b + d * e) / (a - 8);
    c = - ( 7 - a * (1+2) - (36/(10-1)) * b + d * e);
    i = c - c;
    while (i < 100+50){
        array[i] = 1;
        i = i + 1;
    }
    i = array[0] + d - 1 - d;
    while (i < -1 * (c - b * b + a * a)){
        int k = a + 4 - b;
        int j = d, l = k - 1;
        while (j > a + b - 10 + 3){
            int f = 0;
            array[i/10] = array[i/10] + (j*3);
            if (l == 2) array[i/10] = array[i/10] - (2 + j*3);
            if (i > 100)
                f = j / 2 - 1;
            else
                array[i/10] = array[i/10] + j;
            f = f - 1;
            j = j / 2 - 1;
        }
        if (b + sum < d || e)
        i = i + 1;
    }
    i=0;
    while (i < 150){
        sum = sum + array[i];
        i = i + 1;
    }
    write(sum);
    return 0;
}
*/
//test 15
/*
int product (int m1[4], int m2[4]){
    int sum = 0, i = 0;
    while(i < 4){
        sum = sum + m1[i] * m2[i];
        i = i + 1;
    }
    return sum;
}
int main(){
    int m3[2][4], m4[4][2], p[2][2], temp1[4], temp2[4];
    int j = 0, k = 0, l = 0;
    while(j < 2){
        while(k < 4){
            m3[j][k] = j + 1;
            m4[k][j] = k + 1;
            k = k + 1;
        }
        k = 0;
        j = j + 1;
    }
    j = k = 0;
    while(j < 2){
        while(l < 4){
            temp1[l] = m3[j][l];
            l = l + 1;
        }
        l = 0;
        while(k < 2){
            while(l < 4){
                temp2[l] = m4[l][k];
                l = l + 1;
            }
            l = 0;
            p[j][k] = product(temp1, temp2);
            write(p[j][k]);
            k = k + 1;
        }
        k = 0;
        j = j + 1;
    }
    return 0;
}
*/

//test1
/*
int main()
{
    int n;
    n = read();
    if (n > 0) 
        write(1);
    else 
        if (n < 0) 
            write (-1);
        else 
            write(0);
    return 0;
}
*/

//test2
/*
struct ss{
    int aa;
    struct {
       int b; 
    }a;
    int c;
};
int add(int a[2]){
    return a[0] + a[1];
}
int fact(int n)
{
    if (n == 1)
        return n;
    else
        return (n * fact(n - 1));
}
int main()
{
    int m, result;
    struct ss sss;
    int r[10][8];
    r[2][3] = 1;
    m = read();
    sss.a.b = 1;
    if (m > 1)
        result = fact(m);
    else
        result = 1;
    write(result);
    return 0;
}
*/

//test3
/*
struct Operands
{
    int o1;
    int o2;
};
int add(struct Operands temp)
{
    return (temp.o1 + temp.o2);
}
int main()
{
    int n;
    struct Operands op;
    op.o1 = read();
    op.o2 = read();
    n = add(op);
    write(n);
    return 0;
}
*/

//test4
/*
int add(int temp[2])
{
    return (temp[0] + temp[1]);
}
int main()
{
    int op[2];
    int r[1][2];
    int i = 0, j = 0;
    while (i < 2)
    {
        while (j < 2)
        {
            op[j] = i + j;
            j = j + 1;
        }
        r[0][i] = add(op);
        write(r[0][i]);
        i = i + 1;
        j = 0;
    }
    return 0;
}
*/
/*struct s{
    int a;
}c;
int s;
struct ss{
    int a;
    int a;
};
struct sss{
    int a;
    struct sss{
        int b;
    }b;
};
int check();
int check(int a);
int main();
int main()
{
    int i = 0; 
    struct sss ef[11];
    struct sss fe[1];
    struct n n;
    float a[11];
    ef = fe;
    j = i + 1;
    inc(i);
    i = 3.5;
    10 = i;
    i + 3.5;
    main(1);
    i[1];
    i();
    a[1.5];
    i.a;
    c.b;
    return 3.5;
}
int main(){
    
}
*/
/*struct a{
    int a;
    int b;
};
struct b{
    int a;
    int b;
};
struct c{
    float a;
};
struct a func(struct b bb){
    struct c cc;
    return bb;
}
int main(){
    struct a aa;
    struct b bb;
    struct c cc;
    float b;
    aa = bb;
    while(1){
        float a;
        return a;
    }
    if (1) 
        return b;
    else 
        return b;
    bb = func(aa);
    return 0;
}*/
/*struct a{
    int a;
    int a;
    int a;
    struct a{
        int a;
    }aaa;
    float b;
}aa;
struct b{
    int b;
    struct b{
        int a;
    }e;
    float c;
}bb;
struct c{
    int c;
}cc;
int func();
int main(){
    int i =
    10;
    struct a dd = cc;
    struct a ee = aa;
    aa = cc;
    aa = bb;
    func(4);
    return 0;
}
int func(int i){
    return 0;
}
*/
/*
int i,j;
int i;

int f,k[2][3],ff;
int k;
struct a{
    int ab;
};
struct a c;
struct d{
    int aaaa;
    int b,bb[11],bbbb = 3;
    struct{
        float a;
    }cf;
}ab;
struct f ff;

struct {
    int ab;
}cc;
int z;

int func(struct af{int ii;float i;} a,struct d b);
int main(int a);
int main(int aa)
{
  int aa;
  struct fa afe;
  int i;
  int f = ab.cf.b,j = 4;
  int a[3][3];
  main(i && 3,a[3],3);
  i = 3 + a[main(2)][3.5];
  a[2][2] = 1;
  i[1] = 2;
  i();
  a + 1 = 2;
  while(i<10)
  {
     int nn = 4;
     nn = 5;
  }
  nn = 4;
  if (i == 5) j = j + 1; else j = j + 2;
  return 0.1;
}
int main();
int main(int aa){
    
}
*/